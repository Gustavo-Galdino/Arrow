generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String         @id @default(cuid())
  userId       String
  nivel        Int?           @default(1)
  experience   Int?           @default(0)
  weight       Float
  height       Float
  age          DateTime
  goal         Int
  workoutTable WorkoutTable[]
  dietTable    DietTable[]
  stoke        Stoke[]

  @@map("users")
}

model WorkoutTable {
  id     String @id @default(cuid())
  userId String

  WorkoutTableExercise WorkoutTableExercise[]
  User                 User                   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("workoutTables")
}

model WorkoutTableExercise {
  id        String  @id @default(cuid())
  title     String
  completed Boolean @default(false)

  exercise       Exercise[]
  WorkoutTable   WorkoutTable @relation(fields: [workoutTableId], references: [id])
  workoutTableId String

  @@index([workoutTableId])
  @@map("workoutTableExercises")
}

model Exercise {
  id           String  @id @default(cuid())
  exerciseName String
  series       Int
  volume       Int
  annotation   String?

  tables WorkoutTableExercise[]

  @@map("exercises")
}

model DietTable {
  id     String @id @default(cuid())
  userId String

  dietBox DietBox[]
  User    User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("dietTables")
}

model DietBox {
  id    String @id @default(cuid())
  title String

  dietaTable  DietTable  @relation(fields: [dietTableId], references: [id])
  dietTableId String
  dietList    DietList[]

  @@index([dietTableId])
  @@map("dietTableExercises")
}

model DietList {
  id   String @id @default(cuid())
  meal String
  time String

  dietBox DietBox @relation(fields: [dietBoxId], references: [id])

  food      FoodInGrams[]
  dietBoxId String

  @@index([dietBoxId])
}

model Food {
  id       String @id @default(cuid())
  category String
  foodName String
  amount   Int
  type     String
  carbo    Float
  protein  Float
  fat      Float

  Stoke       Stoke?        @relation(fields: [stokeId], references: [id])
  stokeId     String?
  FoodInGrams FoodInGrams[]

  @@index([stokeId])
  @@map("foods")
}

model FoodInGrams {
  id         String    @id @default(cuid())
  grams      Int
  food       Food      @relation(fields: [foodId], references: [id])
  foodId     String
  DietList   DietList? @relation(fields: [dietListId], references: [id])
  dietListId String?

  @@index([foodId])
  @@index([dietListId])
}

model Stoke {
  id     String @id @default(cuid())
  food   Food[]
  userId String
  User   User   @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("stoke")
}
